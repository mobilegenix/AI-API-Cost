// Cost Simulation Dashboard PRD + Prototype (React Native)
// Goal: Predict and visualize AI API usage impact before code deployment

// --- UNIT TESTS SETUP ---
// Recommended test framework: Jest + React Native Testing Library
// File: __tests__/CostSimulationDashboard.test.js
// Sample test:
// import { render, fireEvent } from '@testing-library/react-native';
// import CostSimulationDashboard from '../CostSimulationDashboard';
//
// test('renders cost estimation correctly', () => {
//   const { getByPlaceholderText, getByText } = render(<CostSimulationDashboard />);
//   fireEvent.changeText(getByPlaceholderText('e.g., gpt-4 or gpt-3.5'), 'gpt-3.5');
//   fireEvent.changeText(getByPlaceholderText('Avg Tokens/Request'), '400');
//   fireEvent.changeText(getByPlaceholderText('Requests/Day'), '50');
//   expect(getByText(/Estimated Daily Cost:/)).toBeTruthy();
// });

// --- GITHUB ACTIONS CI/CD SETUP ---
// File: .github/workflows/test.yml
// name: Run Tests
// on: [push, pull_request]
// jobs:
//   test:
//     runs-on: ubuntu-latest
//     steps:
//       - uses: actions/checkout@v3
//       - name: Set up Node
//         uses: actions/setup-node@v3
//         with:
//           node-version: 18
//       - name: Install dependencies
//         run: npm install
//       - name: Run tests
//         run: npm test

import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, Share } from 'react-native';
import { Card, CardContent } from "@/components/ui/card";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

// Simulated token usage data (would be replaced with real logs via Datadog/Grafana pipeline)
const sampleData = [
  { name: 'Mon', tokens: 1200, cost: 0.072 },
  { name: 'Tue', tokens: 1800, cost: 0.108 },
  { name: 'Wed', tokens: 2400, cost: 0.144 },
  { name: 'Thu', tokens: 2000, cost: 0.12 },
  { name: 'Fri', tokens: 1500, cost: 0.09 },
];

// Mock Datadog logging hook
const useDatadogLogger = (event, payload) => {
  useEffect(() => {
    if (event && payload) {
      console.log(`[Datadog] Event: ${event}`, payload);
      // In production, send to Datadog API or log collector here
    }
  }, [event, payload]);
};

// CSV export utility
const exportToCSV = (data) => {
  const csv = ["Day,Tokens,Cost ($)", ...data.map(row => `${row.name},${row.tokens},${row.cost}`)].join("\n");
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.setAttribute("download", "ai_cost_data.csv");
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

// JSON export utility
const exportToJSON = (data) => {
  const json = JSON.stringify(data, null, 2);
  const blob = new Blob([json], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.setAttribute("download", "ai_cost_data.json");
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export default function CostSimulationDashboard() {
  const [modelType, setModelType] = useState("gpt-4");
  const [avgTokens, setAvgTokens] = useState("500");
  const [requestsPerDay, setRequestsPerDay] = useState("100");
  const [estimatedCost, setEstimatedCost] = useState(null);

  useDatadogLogger("cost_estimation_updated", {
    modelType,
    avgTokens,
    requestsPerDay,
  });

  useEffect(() => {
    const costPerToken = modelType === "gpt-4" ? 0.00006 : 0.00003;
    const totalTokens = parseInt(avgTokens) * parseInt(requestsPerDay);
    setEstimatedCost((totalTokens * costPerToken).toFixed(2));
  }, [modelType, avgTokens, requestsPerDay]);

  return (
    <View className="p-4">
      <Text className="text-xl font-bold mb-4">AI API Cost Simulator</Text>

      <Card className="mb-4">
        <CardContent>
          <Text className="text-md">Model Type:</Text>
          <TextInput
            value={modelType}
            onChangeText={setModelType}
            placeholder="e.g., gpt-4 or gpt-3.5"
            className="border p-2 my-2"
          />

          <Text>Avg Tokens/Request:</Text>
          <TextInput
            keyboardType="numeric"
            value={avgTokens}
            onChangeText={setAvgTokens}
            className="border p-2 my-2"
          />

          <Text>Requests/Day:</Text>
          <TextInput
            keyboardType="numeric"
            value={requestsPerDay}
            onChangeText={setRequestsPerDay}
            className="border p-2 my-2"
          />

          <Text className="mt-2">Estimated Daily Cost: ${estimatedCost}</Text>

          <View className="flex-row mt-4 space-x-4">
            <Button title="Export CSV" onPress={() => exportToCSV(sampleData)} />
            <Button title="Export JSON" onPress={() => exportToJSON(sampleData)} />
          </View>
        </CardContent>
      </Card>

      <Card>
        <CardContent>
          <Text className="text-md mb-2">Weekly Token Usage & Cost:</Text>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={sampleData} margin={{ top: 10, right: 20, left: -10, bottom: 5 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis yAxisId="left" label={{ value: 'Tokens', angle: -90, position: 'insideLeft' }} />
              <YAxis yAxisId="right" orientation="right" label={{ value: 'Cost ($)', angle: -90, position: 'insideRight' }} />
              <Tooltip />
              <Legend />
              <Line yAxisId="left" type="monotone" dataKey="tokens" stroke="#8884d8" activeDot={{ r: 8 }} />
              <Line yAxisId="right" type="monotone" dataKey="cost" stroke="#82ca9d" />
            </LineChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>
    </View>
  );
}
